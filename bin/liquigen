#!/usr/bin/env ruby
require 'gli'
require 'liquigen'

# begin # XXX: Remove this begin/rescue before distributing your app
# rescue LoadError
#   STDERR.puts "In development, you need to use `bundle exec bin/liquigen` to run your app"
#   STDERR.puts "At install-time, RubyGems will make sure lib, etc. are in the load path"
#   STDERR.puts "Feel free to remove this message from bin/liquigen now"
#   exit 64
# end

class App
  extend GLI::App

  program_desc 'Generating the liquibase script like rails migration'

  version Liquigen::VERSION

  subcommand_option_handling :normal
  arguments :strict

  desc 'Edit config file'
  arg_name 'no argument'
  command :config do |c|
    c.action do
      Liquigen::Scaffold::Config.new.process
    end
  end

  desc 'add table script'
  arg_name 'properties pair like id:integer'
  long_desc %{
    Example
    liquigen add_table -t user id:integer name:string
  }
  command :add_table do |c|
    c.desc 'table name'
    c.default_value 'table'
    c.flag :t

    c.action do |_, options, props|
      handler = Liquigen::Handlers::CreateTable.new options[:t], props
      handler.process
    end
  end

  desc 'rename tables'
  long_desc %{
    If you want to change the table users to s_users, customers to s_customers,
    Use the following command:
    liquigen rename_table user:s_users customer:s_customers
  }
  arg_name 'old_table_name:new_table_name'
  command :rename_table do |c|
    c.action do |_, _, args|
      handler = Liquigen::Handlers::RenameTable.new args
      handler.process
    end
  end

  desc 'drop tables'
  long_desc %{
    example:
    liquigen drop_table user customer
  }
  arg_name 'table1 table2 ...'
  command :drop_table do |c|
    c.action do |_, _, args|
      handler = Liquigen::Handlers::DropTable.new args
      handler.process
    end
  end

  desc 'add columns script'
  arg_name 'Describe arguments to add_column here'
  long_desc %{
    Example
    liquigen add_column -t user id:integer name:string
  }
  command :add_column do |c|
    c.desc 'table name'
    c.default_value 'table'
    c.flag :t

    c.action do |_, options, props|
      handler = Liquigen::Handlers::AddColumn.new options[:t], props
      handler.process
    end
  end

  desc 'rename columns script'
  arg_name 'Describe arguments to rename_column here'
  long_desc %{
    Example
    liquigen rename_column user:status:status_ok:string customer:status:status_ok:string
  }
  command :rename_column do |c|
    c.action do |_, _, props|
      handler = Liquigen::Handlers::RenameColumn.new props
      handler.process
    end
  end

  desc 'change type'
  long_desc %{
    If you want to change the table column type,
    Use the following command:
    liquigen change_type user:name:string
  }
  arg_name 'table:column_name:new_type'
  command :change_type do |c|
    c.action do |_, _, args|
      handler = Liquigen::Handlers::ChangeType.new args
      handler.process
    end
  end

  desc 'Describe sql here'
  arg_name 'Describe arguments to raw sql here'
  long_desc %{
    Example:
    liquigen sql update permission data
  }
  command :sql do |c|
    c.action do |_, _, args|
      handler = Liquigen::Handlers::Sql.new args
      handler.process
    end
  end

  desc 'add index script'
  arg_name 'Describe arguments to add_index here'
  long_desc %{
    Example
    liquigen add_index -t user id:integer name:string
  }
  command :add_index do |c|
    c.desc 'table name'
    c.default_value 'table'
    c.flag :t

    c.action do |_, options, props|
      handler = Liquigen::Handlers::AddIndex.new options[:t], props
      handler.process
    end
  end

  desc 'Ping the current config'
  arg_name 'No argument'
  command :ping do |c|
    c.action do
      p "package name: #{Liquigen.package_name}"
      p "controller_package_name: #{Liquigen.controller_package_name}"
      p "entity_package_name: #{Liquigen.entity_package_name}"
      p "schema_package_name: #{Liquigen.schema_package_name}"
      p "vo_package_name: #{Liquigen.vo_package_name}"
      p "cucumber_schema_package_name: #{Liquigen.cucumber_schema_package_name}"
      p "libs_root: #{Liquigen.libs_root}"
      p "java_codes_root: #{Liquigen.java_codes_root}"
      p "migration_path: #{Liquigen.migration_path}"
      p "feature_path: #{Liquigen.feature_path}"
      p "cucumber_schema_path: #{Liquigen.cucumber_schema_path}"
    end
  end

  desc 'Scaffod the java classes'
  arg_name 'properties like id:integer, name:string'
  command :scaffold do |c|
    c.desc 'model name'
    c.default_value 'model'
    c.flag :n

    c.desc 'generating the entity'
    c.default_value true
    c.switch :entity

    c.desc 'generating the controller'
    c.default_value true
    c.switch :controller

    c.desc 'generating the repository'
    c.default_value false
    c.switch :repository

    c.desc 'generating the feature'
    c.default_value true
    c.switch :feature

    c.desc 'generating the schema test'
    c.default_value true
    c.switch :schema

    c.desc 'generating the permit'
    c.default_value true
    c.switch :permit

    c.desc 'generating the vo'
    c.default_value true
    c.switch :vo

    c.action do |_, options, args|
      Liquigen::Scaffold::Entity.new(options[:n], args).process if options[:entity]
      Liquigen::Scaffold::Controller.new(options[:n], args).process if options[:controller]
      Liquigen::Scaffold::Repository.new(options[:n], args).process if options[:repository]
      Liquigen::Scaffold::Feature.new(options[:n], args).process if options[:feature]
      Liquigen::Scaffold::Schema.new(options[:n], args).process if options[:schema]
      Liquigen::Scaffold::Permit.new(options[:n], args).process if options[:permit]
      Liquigen::Scaffold::Vo.new(options[:n], args).process if options[:vo]
      Liquigen::Handlers::CreateTable.new(options[:n], args).process
    end
  end

  pre do |global, command, options, args|
    # Pre logic here
    # Return true to proceed; false to abort and not call the
    # chosen command
    # Use skips_pre before a command to skip this block
    # on that command only
    Liquigen.load

    true
  end

  post do |global, command, options, args|
    # Post logic here
    # Use skips_post before a command to skip this
    # block on that command only
  end

  on_error do |err|
    if debugging?
      STDERR.puts err.message
      STDERR.puts err.backtrace.join("\n")
    else
      next if GLI::CustomExit === err

      STDERR.puts err.message
    end
  end
end

def debugging?
  defined? Bundler
end

exit App.run(ARGV)
