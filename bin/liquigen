#!/usr/bin/env ruby
require 'gli'
require 'liquigen'

# begin # XXX: Remove this begin/rescue before distributing your app
# rescue LoadError
#   STDERR.puts "In development, you need to use `bundle exec bin/liquigen` to run your app"
#   STDERR.puts "At install-time, RubyGems will make sure lib, etc. are in the load path"
#   STDERR.puts "Feel free to remove this message from bin/liquigen now"
#   exit 64
# end

class App
  extend GLI::App

  program_desc 'Generating the liquibase script like rails migration'

  version Liquigen::VERSION

  subcommand_option_handling :normal
  arguments :strict

  desc 'add table script'
  arg_name 'Describe arguments to add_table here'
  command :add_table do |c|
    c.desc 'table name'
    c.default_value 'table'
    c.flag :t

    c.action do |_, options, props|
      table = options[:t].underscore.singularize
      handler = Liquigen::Handlers::CreateTable.new table, props
      handler.process
    end
  end

  desc 'Describe modify_table here'
  arg_name 'Describe arguments to modify_table here'
  command :modify_table do |c|
    c.action do |global_options, options,args|
      puts 'waiting for the implementation'
    end
  end

  desc 'Describe drop_table here'
  arg_name 'Describe arguments to drop_table here'
  command :drop_table do |c|
    c.action do |global_options, options,args|
      puts 'waiting for the implementation'
    end
  end

  pre do |global, command, options, args|
    # Pre logic here
    # Return true to proceed; false to abort and not call the
    # chosen command
    # Use skips_pre before a command to skip this block
    # on that command only
    true
  end

  post do |global, command, options, args|
    # Post logic here
    # Use skips_post before a command to skip this
    # block on that command only
  end

  on_error do |err|
    if debugging?
      STDERR.puts err.message
      STDERR.puts err.backtrace.join( "\n" )
    else
      next if GLI::CustomExit === err

      STDERR.puts err.message
    end
  end
end

def debugging?
  defined? Bundler
end

exit App.run(ARGV)
